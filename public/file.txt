<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Task1</title>

    <style>
      body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
      }
      .container {
        max-width: 450px;
        margin: 0 auto;
        padding: 40px;
        background-color: #fff;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.2);
      }
      h2 {
        text-align: center;
      }
      label,
      input,
      select {
        display: block;
        margin-bottom: 8px;
      }
      input[type="text"],
      input[type="email"],
      input[type="number"],
      input[type="tel"],
      input[type="password"],
      select {
        width: 100%;
        padding: 10px;

        border: 1px solid #ccc;

        border-radius: 5px;
      }

      button[type="submit"] {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h2>User Detail Form</h2>
      <form action="/createuser" method="POST">
        <label for="fname">First Name:</label>
        <input
          type="text"
          id="fname"
          name="fname"
          oninput="validateInput(this)"
          required
        />
        <label for="lname">Last Name:</label>
        <input
          type="text"
          id="lname"
          name="lname"
          oninput="validateInput(this)"
          required
        />
        <label for="mob">Mobile No:</label>
        <input
          type="tel"
          minlength="8"
          maxlength="10"
          id="mob"
          pattern="[0-9]{10}"
          title="Please enter a 10-digit mobile number."
          name="mob"
          required
        />
        <label for="add">Address:</label>
        <input
          type="text"
          id="addstr"
          name="str"
          placeholder="Street"
          oninput="validateInput(this)"
          required
        />
        <input
          type="text"
          id="addci"
          name="city"
          placeholder="City"
          oninput="validateInput(this)"
          required
        />
        <input
          type="text"
          id="addst"
          name="stat"
          placeholder="State"
          oninput="validateInput(this)"
          required
        />
        <input
          type="text"
          id="addcont"
          name="cont"
          placeholder="Country"
          oninput="validateInput(this)"
          required
        />

        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required />

        <label for="login">Login Id:</label>
        <input
          type="text"
          minlength="8"
          id="login"
          name="login"
          pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
          title="Must contain at least one number and one uppercase and lowercase letter, and at least 8 or more characters"
          required
        />
        <label for="PASS">Password:</label>
        <input
          type="password"
          id="pass"
          name="pass"
          pattern="^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\W_]).{6,}$"
          title="Password must contain at least 8 characters, including one digit, one lowercase letter, one uppercase letter, and one special character."
          required
        />

        <button type="submit">Save</button>
      </form>
    </div>
    <script>
      function validateInput(inputField) {
        // Use a regular expression to check if the input contains only alphabetic characters.
        var regex = /^[a-zA-Z]*$/;
        if (!regex.test(inputField.value)) {
          // If the input doesn't match the pattern, remove the non-alphabetic characters.
          inputField.value = inputField.value.replace(/[^a-zA-Z]/g, "");
        }
      }
    </script>
  </body>
</html>




<!DOCTYPE html>
<html>
  <head>
    <title>User Data</title>
    <style>
      .container {
        display: grid;

        grid-template-columns: repeat(4, 1fr);

        grid-auto-rows: auto;

        grid-gap: 1rem;
      }
      .card {
        border: 1px solid #ccc;
        width: 300px;
        padding: 10px;
        margin: 10px;

        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        text-align: center;
      }

      .user-details {
        font-weight: bold;
      }
      .popup {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 1;
      }
    </style>
  </head>
  <body>
    <h1>User Data</h1>
    

    <div class="container">
      <div class="card" id="card">
        <p class="user-details" id="user-sock">Socket Id:</p>
        <p class="user-details">Click Me For Info</p>
      </div>
    </div>
    <div class="popup" id="popup">
      <div class="container">
        <% let foundUser = false; %>
        <% users.forEach(user => { %> 
          <% if (user.email === userEmail) { %>
            <!-- Display user details when email matches -->
            <div class="card" id="card">
              <p class="user-details">Name: <%= user.fname %> <%= user.lname %></p>
              <p class="user-details">Mob No: <%= user.mobile %></p>
              <p class="user-details">EmailId: <%= user.email %></p>
              <p class="user-details">Address: <%= user.Address %></p>
              <p class="user-details">LoginId: <%= user.loginId %></p>
              <p class="user-details">Password: <%= user.password %></p>
              <p class="user-details">CreatedAt: <%= user.createdAt %></p>
            </div>
            <% foundUser = true; %>
          <% } %>
        <% }); %>
      
        <% if (!foundUser) { %>
          <!-- Display a message when no matching user is found -->
          <div class="card" id="card">
            <p class="user-details">User Email Not Found</p>
          </div>
          <!-- Refresh the page after a delay (e.g., 3 seconds) -->
          <script>
            setTimeout(function() {
              window.location.reload();
            }, 1000); // Refresh after 3 seconds (adjust the delay as needed)
          </script>
        <% } %>
      </div>
     
      <!-- <div class="container">
        <% users.forEach(user => { %> 
          <% if (user.email === userEmail) { %>
          
        <div class="card" id="card">
          <p class="user-details">Name: <%= user.fname %> <%= user.lname %></p>
          <p class="user-details">Mob No: <%= user.mobile %></p>
          <p class="user-details">EmailId: <%= user.email %></p>
          <p class="user-details">Address: <%= user.Address %></p>
          <p class="user-details">LoginId: <%= user.loginId %></p>
          <p class="user-details">Password: <%= user.password %></p>
          <p class="user-details">CreatedAt: <%= user.createdAt %></p>
          
        </div>
        <% } %>
        <% }); %>
      </div> -->
      <button id="close">Close</button>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();

      socket.on("connectedRoom", (data) => {
        const sock = document.getElementById("user-sock");

        sock.innerHTML = "";
        data.forEach((user) => {
          const userElements = document.createElement("div");
          userElements.textContent = `Socket Id: ${user.sock} \n Email: ${user.email}`;
          sock.appendChild(userElements);
          const cardDiv = document.getElementById("card");
          const cls = document.getElementById("close");
          

          cardDiv.addEventListener("click", async () => {
            console.log("Card clicked!");
            const popup = document.getElementById("popup");

            popup.style.display = "block";
            
            
          });
          cls.addEventListener("click", async () => {
            const popup = document.getElementById("popup");
        popup.style.display = "none";
            
            
          });
          
        });
      });
    </script>
  </body>
</html>



const express = require("express");
const bodyParser = require("body-parser");
const { MongoClient } = require("mongodb");
const { default: mongoose } = require("mongoose");
const http = require("http");
const session = require('express-session');

const socketIo = require("socket.io");

const app = express();
const server = http.createServer(app);
const io = socketIo(server);
const port = process.env.PORT || 6600;
const uri =
  "mongodb+srv://modidevesh15:mobztask000@cluster1.utjht8p.mongodb.net/User?retryWrites=true&w=majority"; 
const usersInRoom = new Map();
const client = new MongoClient(uri, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

app.use(bodyParser.json());
app.use(express.json());
app.use(session({
  secret: 'your-secret-key', // Replace with a secret key
  resave: false,
  saveUninitialized: true,
}));

app.use(express.static("public"));
app.use(bodyParser.urlencoded({ extended: true }));
mongoose.connect(
  "mongodb+srv://modidevesh15:mobztask000@cluster1.utjht8p.mongodb.net/User?retryWrites=true&w=majority"
);

var db = mongoose.connection;
db.on("error", () => console.log("Error in connecting to the database"));
db.once("open", () => {
  console.log("Connected to the database");
  

  app.post("/createuser", (req, res) => {
    var fname = req.body.fname;
    var lname = req.body.lname;
    var email = req.body.email;
    var mob = req.body.mob;
    var pass = req.body.pass;
    var str = req.body.str;
    var city = req.body.city;
    var stat = req.body.stat;
    var cont = req.body.cont;
    var login = req.body.login;
    var add = `${str}, ${city}, ${stat}, ${cont}`;
    var date = new Date();

    var data = {
      fname: fname,
      lname: lname,
      mobile: mob,
      Address: add,
      email: email,
      loginId: login,
      password: pass,
      createdAt: date,
    };

    db.collection("users").insertOne(data, (err, collection) => {
      if (err) {
        console.error("Error inserting user data:", err);
        res.status(500).send("Error inserting user data");
        return;
      }
      const userId = collection.insertedId;
      console.log(`User with ID ${userId} inserted into MongoDB`);
      

      
      

      
    });
    io.on("connection", (socket) => {
      console.log("A user connected");
    
      
      socket.join("live_users")
      var sock = socket.id;
      
      usersInRoom.set(socket.id, { sock,email,fname  });
      
      
      console.log(usersInRoom)
      io.sockets.in("live_users").emit('connectedRoom',Array.from(usersInRoom.values()));
    
      socket.on('disconnect', ()=>{
        console.log("A user disconnected");
        usersInRoom.delete(socket.id);
      })
    
      

    });
    req.session.userEmail = email;


    console.log("Record Inserted");

    res.redirect("/data");
  });
});



app.get("/", (req, res) => {
  res.set({ "Allow-access-Allow-Origin": "*" });
  return res.redirect("index.html");
});

app.set("view engine", "ejs");

app.get("/data", async (req, res) => {
  
  const db = client.db(); 
  const collection = db.collection("users"); 
  const userEmail = req.session.userEmail;
  
  

  try {
    const users = await collection.find({}).toArray();
    

    res.render("index", { users,userEmail});
    
  } catch (err) {
    console.error("Error fetching user data:", err);
    res.status(500).send("Error fetching user data from MongoDB");
  }
});





server.listen(port, () => {
  console.log(`Server listening on port ${port}`);
});
